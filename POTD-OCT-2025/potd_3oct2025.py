'''Possible Words From Phone Digits
You are given a keypad (as shown in the diagram) and an array arr[ ] containing digits, your task is to list all possible words in any order which can be generated by pressing numbers in arr[] sequentially.

Note: Number 0 and 1 do not map to any letters.
You can return the words in any order, the driver code will print them in sorted order.
Examples :

Input: arr[] = [2, 3]
Output: [ad, ae, af, bd, be, bf, cd, ce, cf]
Explanation: When we press 2 and 3 total 3 x 3 = 9 possible words formed.

Input: arr[] = [2]
Output: [a, b, c]
Explanation: When we press 2 total 3 possible words formed.
Constraints:
1 ≤ arr.size() ≤ 9
0 ≤ arr[i] ≤ 9
Expected Complexities
Time Complexity: O(4 ^ n)
Auxiliary Space: O(n)'''
class Solution:
    def possibleWords(self, arr):
        # code here
        res = []
    
        # mapping numbers with letters
        padMap = ["", "", "abc", "def", "ghi", "jkl",
                  "mno", "pqrs", "tuv", "wxyz"]
    
        self.possibleWordsRec(arr, 0, "", padMap, res)
        return res
    
    def possibleWordsRec(self,arr, index, prefix, padMap, res):
        if index == len(arr):
            res.append(prefix)
            return
    
        digit = arr[index]
    
        # Skip invalid digits
        if digit < 2 or digit > 9:
            self.possibleWordsRec(arr, index + 1, prefix, padMap, res)
            return
    
        # Place all possible letters for this digit
        for ch in padMap[digit]:
            self.possibleWordsRec(arr, index + 1, prefix + ch, padMap, res)
        
